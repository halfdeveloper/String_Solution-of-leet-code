
Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

 

Example 1:

Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Example 2:

Input: s = "God Ding"
Output: "doG gniD"
 

Constraints:

1 <= s.length <= 5 * 104
s contains printable ASCII characters.
s does not contain any leading or trailing spaces.
There is at least one word in s.
All the words in s are separated by a single space.














*----------------------------------------------------------------------------------------------------------------*
class Solution {
    public String reverseWords(String s) 
    { 
        // Approach:
    // Split the string into String array 'words'.
    // Then use a StringBuilder to reverse each words within the 'words' array.
    // Note: This approach uses more time and memory than the two pointers,  due        to the use of StringBuilder.
        // Split the String 's' using regex " ".
        String[] words = s.split(" ");

        // Reverse each word in the 'words' array.
        for (int i = 0; i < words.length; i++) {
            words[i] = new StringBuilder(words[i]).reverse().toString();
        }

        // Build a new String using the " " delimiter and return result.
        return String.join(" ", words);
  

    }
}


****************************************************************************************************************************************





       
      
