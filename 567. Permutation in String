567. Permutation in String
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
*********************************************************
// class Solution {
//     static String printPermutn(String str, String ans)
//     {
//         if (str.length() == 0) {
//             return ans;
//         }
 
//         for (int i = 0; i < str.length(); i++) {
//             char ch = str.charAt(i);
//             String ros = str.substring(0, i) + str.substring(i + 1);
//             printPermutn(ros, ans + ch);
//         }
//         return "";
//     }
        
    
//     public boolean checkInclusion(String s1, String s2) {
//         String res=printPermutn(s1,"");
//         if(s2.contains(res)){
//             return true;
//         }
//         else{
//             return false;
//         }

//     }
       
    
// }
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int str1 = s1.length();
        int str2 = s2.length();
        if(str1>str2) return false;
        int[] arr = new int[26];
        for(int i=0;i<str1;i++){
            arr[s1.charAt(i)-'a']++;
         }
         for(int i = 0;i<str2;i++){
            arr[s2.charAt(i)-'a']--;
            if(i-str1 >= 0){
                arr[s2.charAt(i-str1)-'a']++;
            }
            if(zero(arr)) {
                return true;
            }
        }
        return false;
    }
    public boolean zero(int[] arr){
       for(int i =0 ;i<26;i++){
           if(arr[i] != 0) {
               return false;
           }
       }
       return true;
    }
}
*********************************************************
