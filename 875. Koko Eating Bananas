875. Koko Eating Bananas
Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4
Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30
Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23
 

Constraints:

1 <= piles.length <= 104
piles.length <= h <= 109
1 <= piles[i] <= 109
-----------------------------------------------------------
// class Solution {
//     public int minEatingSpeed(int[] piles, int h) {
//         int max=Integer.MIN_VALUE;
//         for(int  val:piles)
//         {
//             max=Math.max(val,max);
//         }
//         if(h==piles.length)
//         {
//            return max;
//         }
//         int start=0;
//         int end =max;
//         int speed=Integer.MAX_VALUE;
//         while(start<=end)
//         {
//             int sp=start+(end-start)/2;// to avoid the overflow
//             if(isIt(piles,h,sp)==true){
//                 speed=sp;
//                  end=sp-1;
//             }
//             else
//             {
//                 start=sp+1;
//             }
//         }
//         return speed;
        
//     }
//     public static boolean isIt(int piles[],int h,int sp)
//     {
//         int time=0;
//         for(int i=0;i<piles.length ;i++){
//             time+=(int)Math.ceil(piles[i]*1.0/sp);
//         }
//         return time<=h;
        

//     }
// }
class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low=1;
        int high=Integer.MIN_VALUE;
        for(int i=0;i<piles.length;i++){
            high=Math.max(high,piles[i]);
        }
        while(low<high){
            int mid=low+(high-low)/2;
            if(blackbox(mid,piles,h)){
                high=mid;
            }
            else
                low=mid+1;
        }
        return low;
    }
    public boolean blackbox(int maxpiles,int[] piles,int h){
        int hours=0;
        for(int i:piles){
            int time=i/maxpiles;
            hours+=time;
            if(i%maxpiles!=0) hours++;
        }
        if(hours<=h)
            return true;
        return false;
    }
}
